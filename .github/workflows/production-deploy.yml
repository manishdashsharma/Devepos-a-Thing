name: Deploy to Production Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to Production Server
        env:
          DEPLOY_PATH: /home/production
          DEPLOY_HOST: ${{ secrets.SERVER_IP }}
          DEPLOY_USER: ${{ secrets.SERVER_USER }}
          GITHUB_USERNAME: ${{ github.repository_owner }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_TOKEN: ${{ secrets.DEPLOY_GITHUB_TOKEN }}
          DOMAIN: prod.manishdashsharma.site
        run: |
          # Pass environment variables to the SSH session
          ssh $DEPLOY_USER@$DEPLOY_HOST "
            export DEPLOY_PATH='$DEPLOY_PATH'
            export GITHUB_USERNAME='$GITHUB_USERNAME'
            export GITHUB_REPO='$GITHUB_REPO'
            export GITHUB_TOKEN='$GITHUB_TOKEN'
            export DOMAIN='$DOMAIN'
            
            # Create directory if it doesn't exist
            mkdir -p '$DEPLOY_PATH'
            
            # Initialize git repository if it doesn't exist
            cd '$DEPLOY_PATH'
            if [ ! -d .git ]; then
              git init
              git remote add origin https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$GITHUB_REPO.git
            else
              git remote set-url origin https://$GITHUB_USERNAME:$GITHUB_TOKEN@github.com/$GITHUB_REPO.git
            fi

            # Fetch and reset to match remote
            git fetch origin main
            git reset --hard origin/main

            # Continue with deployment...
            if [ ! -f \"Docker/docker-compose.yml\" ]; then
              echo '‚ùå Error: Docker/docker-compose.yml not found'
              exit 1
            fi

            # SSL Certificate Setup with Certbot
            echo 'üîí Checking/Updating SSL certificates...'
            certbot certonly --standalone -d $DOMAIN --non-interactive --agree-tos -m mdashsharma95@gmail.com || { echo '‚ùå Certbot failed'; exit 1; }
            
            # Stop existing containers
            echo 'üõë Stopping existing containers...'
            docker compose -f Docker/docker-compose.yml --profile production down || true

            # Build and deploy with Docker Compose
            echo 'üèóÔ∏è Building and deploying with Docker Compose...'
            docker compose -f Docker/docker-compose.yml --env-file .env.production --profile production up -d --build || { echo '‚ùå Docker Compose failed'; exit 1; }

            # Clean up old Docker resources
            echo 'üßπ Cleaning up Docker resources...'
            docker system prune -f || { echo '‚ö†Ô∏è Docker prune failed'; exit 1; }

            echo '‚ú® Production Deployment completed successfully!'
          "

      - name: Verify Deployment
        run: |
          echo "‚è≥ Waiting for services to start..."
          sleep 30  # Allow time for services to start
          
          # Check if services are responding
          echo "üîç Verifying service availability..."
          curl -f -s -S --retry 3 --retry-delay 5 -I https://prod.manishdashsharma.site || {
            echo "‚ùå Service verification failed"
            exit 1
          }